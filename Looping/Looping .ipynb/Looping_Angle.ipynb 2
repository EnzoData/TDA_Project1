{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Looping through all the letters in angle direction\n",
    "## Importing notebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy \n",
    "from scipy import ndimage\n",
    "import PIL\n",
    "from persim import plot_diagrams\n",
    "from ripser import ripser, lower_star_img \n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 2)\n",
      "[[ 3.  7.]\n",
      " [ 2. inf]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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U5WVlZKk6OhowgthpVlt9PVN2txut2JiYhr9OsuWLWvO2wNhr/rahu3atdP9999vuiSg1TUpwH7/+99Lkmw2m15++WUlJiZ6n6uoqNAnn3yiXr16+bZCADXUXpj33/7t30yXBBjRpAD73e9+J+nMDGz+/Pk1DhfGxMQoMzNT8+fP922FALxYVR74lyYF2DfffCNJGjFihN555x2df/75fikKwNkIL6CmZp0Dq75AKAD/O3nypH74wx8SXkA1zQow6UwH4apVq1RYWKjy8vIaz82dO7fFhQH4lzZt2mjevHmaO3eu3n33XcILUDMD7OOPP9b48ePVtWtX7dy5U3379tXevXtlWZYGDRrk6xqBsGVZlncFnOuuu04TJ05URAT3oQWkZl4H9uCDD+q+++5TQUGB4uLi9Je//EX79+/XsGHDdMMNN/i6RiAsOZ1OXXLJJSosLPTuI7yAf2nWb8OXX36pyZMnSzpzP6+ysjIlJiZq9uzZeuqpp3xaIBCOqho2Nm7cyDVeQD2aFWBt2rTxrgrfsWNHff31197nDh8+7JvKgDBVu9vwpZdeMl0SEJCadQ7skksu0X//93+rT58+GjNmjO677z7t2LFD77zzji655BJf1wiEDVrlgcZrVoDNnTtXJ06ckCQ9/vjjOnHihN588011797de7EzgKYhvICmMboafUuxGj1ChWVZGjFihPLz8wkvhJVWX41eko4dO6aXX35ZDz74oPcGllu3btWBAwea+5JA2LLZbHrzzTd1yy23EF5AIzVrBuZ0OjVq1CjZ7Xbt3btXO3fuVFZWlh599FHt27dPixcv9ketZ2EGhmBXUlIiu91uugzAmFafgd17772aMmWKdu/erbi4OO/+q666Sp988klzXhIIO06nUz169NCf/vQn06UAQalZAbZp0yb99Kc/PWt/p06ddOjQoRYXBYS6qoaN7777TgsWLJDH4zFdEhB0mhVgcXFxcrlcZ+3fuXOn2rdv3+KigFBWu9twzZo1iopq9rKkQNhqVoBNmDBBs2fP1unTpyWdOQFdWFioWbNm6brrrvNpgUAooVUe8J1mBdizzz6r7777TikpKSorK9OwYcPUvXt3JSUl6Te/+Y2vawRCAuEF+FazjlskJyfr008/1fr167VlyxZVVlZq0KBBGjVqlK/rA0LGypUrCS/Ah5ocYJWVlXrllVf0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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dgm = lower_star_img(letter)\n",
    "print(dgm.shape)\n",
    "print(dgm)\n",
    "plot_diagrams(dgm)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Probing scanning through loops using maximum values\n",
    "letters = genfromtxt('letters.csv', delimiter=',') # Upload the file\n",
    "\n",
    "dgmProb = [None]*26 #Initialize an empty list\n",
    "for i in range(26):\n",
    "    letter_one_line=letters[i,:]\n",
    "\n",
    "    # initialize matrix of size 10x10 with all values 100\n",
    "    letter=np.full((10, 10), 100)\n",
    "\n",
    "    # convert one line letter to 10x10 matrix replacing zeros with 100\n",
    "    for k in range(1,101):\n",
    "        if letter_one_line[k]==1.0:\n",
    "            row=int((k-1)/10) \n",
    "            column=(k-1)%10 \n",
    "            letter[row,column]=max(k%10,int(k-1)%10)            \n",
    "    dgmProb[i] = lower_star_img(letter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([[ 2., inf]]), array([[ 3., inf]]), array([[ 2., inf]]), array([[ 3., inf]]), array([[ 3., inf]]), array([[ 3., inf]]), array([[ 2., inf]]), array([[ 3., inf]]), array([[ 4.,  5.],\n",
      "       [ 4., inf]]), array([[ 4.,  6.],\n",
      "       [ 4., inf]]), array([[ 3., inf]]), array([[ 3., inf]]), array([[ 2., inf]]), array([[ 2., inf]]), array([[ 2., inf]]), array([[ 3., inf]]), array([[ 6.,  7.],\n",
      "       [ 2., inf]]), array([[ 3., inf]]), array([[ 3.,  8.],\n",
      "       [ 3., inf]]), array([[ 2., inf]]), array([[ 3., inf]]), array([[ 2., inf]]), array([[ 2., inf]]), array([[ 3.,  4.],\n",
      "       [ 3., inf]]), array([[ 3., inf]])]\n"
     ]
    }
   ],
   "source": [
    "# Print A-Z diagrams\n",
    "print(dgmProb[0:25])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2. inf]]\n"
     ]
    }
   ],
   "source": [
    "# Print A digram\n",
    "print(dgmProb[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.  7.]\n",
      " [ 2. inf]]\n"
     ]
    }
   ],
   "source": [
    "# Print z diagram\n",
    "print(dgmProb[25])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
